Index: src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java	(date 1543422266000)
+++ src/test/java/ru/javawebinar/topjava/web/RootControllerTest.java	(date 1543437764262)
@@ -1,13 +1,15 @@
 package ru.javawebinar.topjava.web;
 
+import org.assertj.core.matcher.AssertionMatcher;
 import org.junit.jupiter.api.Test;
+import ru.javawebinar.topjava.model.User;
 
-import static org.hamcrest.Matchers.*;
+import java.util.List;
+
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
-import static ru.javawebinar.topjava.UserTestData.USER;
-import static ru.javawebinar.topjava.model.AbstractBaseEntity.START_SEQ;
+import static ru.javawebinar.topjava.UserTestData.*;
 
 class RootControllerTest extends AbstractControllerTest {
 
@@ -18,12 +20,13 @@
                 .andExpect(status().isOk())
                 .andExpect(view().name("users"))
                 .andExpect(forwardedUrl("/WEB-INF/jsp/users.jsp"))
-                .andExpect(model().attribute("users", hasSize(2)))
-                .andExpect(model().attribute("users", hasItem(
-                        allOf(
-                                hasProperty("id", is(START_SEQ)),
-                                hasProperty("name", is(USER.getName()))
-                        )
-                )));
+                .andExpect(model().attribute("users",
+                        new AssertionMatcher<List<User>>() {
+                            @Override
+                            public void assertion(List<User> actual) throws AssertionError {
+                                assertMatch(actual, ADMIN, USER);
+                            }
+                        }
+                ));
     }
 }
\ No newline at end of file
Index: src/main/java/ru/javawebinar/topjava/web/json/JsonUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ru/javawebinar/topjava/web/json/JsonUtil.java	(date 1543422266000)
+++ src/main/java/ru/javawebinar/topjava/web/json/JsonUtil.java	(date 1543422282593)
@@ -1,14 +1,10 @@
 package ru.javawebinar.topjava.web.json;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.ObjectReader;
 
 import java.io.IOException;
-import java.util.Collection;
 import java.util.List;
-import java.util.Map;
-import java.util.stream.Collectors;
 
 import static ru.javawebinar.topjava.web.json.JacksonObjectMapper.getMapper;
 
@@ -38,24 +34,4 @@
             throw new IllegalStateException("Invalid write to JSON:\n'" + obj + "'", e);
         }
     }
-
-    public static <T> String writeIgnoreProps(Collection<T> collection, String... ignoreProps) {
-        List<Map<String, Object>> list = collection.stream()
-                .map(e -> getAsMapWithIgnore(e, ignoreProps))
-                .collect(Collectors.toList());
-        return writeValue(list);
-    }
-
-    public static <T> String writeIgnoreProps(T obj, String... ignoreProps) {
-        Map<String, Object> map = getAsMapWithIgnore(obj, ignoreProps);
-        return writeValue(map);
-    }
-
-    private static <T> Map<String, Object> getAsMapWithIgnore(T obj, String[] ignoreProps) {
-        Map<String, Object> map = getMapper().convertValue(obj, new TypeReference<Map<String, Object>>() {});
-        for (String prop : ignoreProps) {
-            map.remove(prop);
-        }
-        return map;
-    }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(date 1543422266000)
+++ pom.xml	(date 1543437850431)
@@ -30,7 +30,6 @@
         <!--    Tests  -->
         <junit.jupiter.version>5.3.1</junit.jupiter.version>
         <hamcrest.version>1.3</hamcrest.version>
-        <jsonassert.version>1.5.0</jsonassert.version>
 
         <!-- Hibernate -->
         <hibernate.version>5.3.7.Final</hibernate.version>
@@ -238,16 +237,10 @@
 
         <dependency>
             <groupId>org.hamcrest</groupId>
-            <artifactId>hamcrest-all</artifactId>
+            <artifactId>hamcrest-core</artifactId>
             <version>${hamcrest.version}</version>
             <scope>test</scope>
         </dependency>
-        <dependency>
-            <groupId>org.skyscreamer</groupId>
-            <artifactId>jsonassert</artifactId>
-            <version>${jsonassert.version}</version>
-            <scope>test</scope>
-        </dependency>
 
         <dependency>
             <groupId>org.springframework</groupId>
Index: src/test/java/ru/javawebinar/topjava/TestUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/TestUtil.java	(date 1543422266000)
+++ src/test/java/ru/javawebinar/topjava/TestUtil.java	(date 1543422282610)
@@ -1,22 +1,32 @@
 package ru.javawebinar.topjava;
 
+import org.springframework.test.web.servlet.MvcResult;
 import org.springframework.test.web.servlet.ResultActions;
 import ru.javawebinar.topjava.web.json.JsonUtil;
 
 import java.io.UnsupportedEncodingException;
+import java.util.List;
 
 public class TestUtil {
 
-    public static String getContent(ResultActions action) throws UnsupportedEncodingException {
-        return action.andReturn().getResponse().getContentAsString();
+    public static String getContent(MvcResult result) throws UnsupportedEncodingException {
+        return result.getResponse().getContentAsString();
     }
 
     public static ResultActions print(ResultActions action) throws UnsupportedEncodingException {
-        System.out.println(getContent(action));
+        System.out.println(getContent(action.andReturn()));
         return action;
     }
 
-    public static <T> T readFromJson(ResultActions action, Class<T> clazz) throws UnsupportedEncodingException {
-        return JsonUtil.readValue(getContent(action), clazz);
+    public static <T> T readFromJsonResultActions(ResultActions action, Class<T> clazz) throws UnsupportedEncodingException {
+        return readFromJsonMvcResult(action.andReturn(), clazz);
     }
-}
+
+    public static <T> T readFromJsonMvcResult(MvcResult result, Class<T> clazz) throws UnsupportedEncodingException {
+        return JsonUtil.readValue(getContent(result), clazz);
+    }
+
+    public static <T> List<T> readListFromJsonMvcResult(MvcResult result, Class<T> clazz) throws UnsupportedEncodingException {
+        return JsonUtil.readValues(getContent(result), clazz);
+    }
+}
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(date 1543422266000)
+++ src/test/java/ru/javawebinar/topjava/web/user/ProfileRestControllerTest.java	(date 1543422282604)
@@ -23,7 +23,7 @@
                 mockMvc.perform(get(REST_URL))
                         .andExpect(status().isOk())
                         .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
-                        .andExpect(contentJson(USER))
+                        .andExpect(getUserMatcher(USER))
         );
     }
 
Index: src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(date 1543422266000)
+++ src/test/java/ru/javawebinar/topjava/web/user/AdminRestControllerTest.java	(date 1543422282600)
@@ -15,7 +15,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
-import static ru.javawebinar.topjava.TestUtil.readFromJson;
+import static ru.javawebinar.topjava.TestUtil.readFromJsonResultActions;
 import static ru.javawebinar.topjava.UserTestData.*;
 
 class AdminRestControllerTest extends AbstractControllerTest {
@@ -29,7 +29,7 @@
                 .andDo(print())
                 // https://jira.spring.io/browse/SPR-14472
                 .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
-                .andExpect(contentJson(ADMIN));
+                .andExpect(getUserMatcher(ADMIN));
     }
 
     @Test
@@ -37,7 +37,7 @@
         mockMvc.perform(get(REST_URL + "by?email=" + USER.getEmail()))
                 .andExpect(status().isOk())
                 .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
-                .andExpect(contentJson(USER));
+                .andExpect(getUserMatcher(USER));
     }
 
     @Test
@@ -69,7 +69,7 @@
                 .content(JsonUtil.writeValue(expected)))
                 .andExpect(status().isCreated());
 
-        User returned = readFromJson(action, User.class);
+        User returned = readFromJsonResultActions(action, User.class);
         expected.setId(returned.getId());
 
         assertMatch(returned, expected);
@@ -81,6 +81,6 @@
         TestUtil.print(mockMvc.perform(get(REST_URL))
                 .andExpect(status().isOk())
                 .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
-                .andExpect(contentJson(ADMIN, USER)));
+                .andExpect(getUserMatcher(ADMIN, USER)));
     }
 }
\ No newline at end of file
Index: src/test/java/ru/javawebinar/topjava/UserTestData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1543422266000)
+++ src/test/java/ru/javawebinar/topjava/UserTestData.java	(date 1543422282617)
@@ -7,9 +7,9 @@
 import java.util.List;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
+import static ru.javawebinar.topjava.TestUtil.readFromJsonMvcResult;
+import static ru.javawebinar.topjava.TestUtil.readListFromJsonMvcResult;
 import static ru.javawebinar.topjava.model.AbstractBaseEntity.START_SEQ;
-import static ru.javawebinar.topjava.web.json.JsonUtil.writeIgnoreProps;
 
 public class UserTestData {
     public static final int USER_ID = START_SEQ;
@@ -30,11 +30,11 @@
         assertThat(actual).usingElementComparatorIgnoringFields("registered", "meals").isEqualTo(expected);
     }
 
-    public static ResultMatcher contentJson(User... expected) {
-        return content().json(writeIgnoreProps(List.of(expected), "registered"));
+    public static ResultMatcher getUserMatcher(User... expected) {
+        return result -> assertMatch(readListFromJsonMvcResult(result, User.class), List.of(expected));
     }
 
-    public static ResultMatcher contentJson(User expected) {
-        return content().json(writeIgnoreProps(expected, "registered"));
+    public static ResultMatcher getUserMatcher(User expected) {
+        return result -> assertMatch(readFromJsonMvcResult(result, User.class), expected);
     }
 }
